(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.Sound = f()
    }
})(function() {
    var define, module, exports;
    return (function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f
                }
                var l = n[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e)
                }, l, l.exports, e, t, n, r)
            }
            return n[o].exports
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++) s(r[o]);
        return s
    })({
        1: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filterable = (function() {
                function Filterable(input, output) {
                    this._output = output;
                    this._input = input;
                }
                Object.defineProperty(Filterable.prototype, "destination", {
                    get: function() {
                        return this._input;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Filterable.prototype, "filters", {
                    get: function() {
                        return this._filters;
                    },
                    set: function(filters) {
                        var _this = this;
                        if (this._filters) {
                            this._filters.forEach(function(filter) {
                                if (filter) {
                                    filter.disconnect();
                                }
                            });
                            this._filters = null;
                            this._input.connect(this._output);
                        }
                        if (filters && filters.length) {
                            this._filters = filters.slice(0);
                            this._input.disconnect();
                            var prevFilter_1 = null;
                            filters.forEach(function(filter) {
                                if (prevFilter_1 === null) {
                                    _this._input.connect(filter.destination);
                                } else {
                                    prevFilter_1.connect(filter.destination);
                                }
                                prevFilter_1 = filter;
                            });
                            prevFilter_1.connect(this._output);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Filterable.prototype.destroy = function() {
                    this.filters = null;
                    this._input = null;
                    this._output = null;
                };
                return Filterable;
            }());
            exports.default = Filterable;

        }, {}],
        2: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var index_1 = require("./index");
            var AUDIO_EXTENSIONS = ["wav", "mp3", "ogg", "oga", "m4a"];

            function middleware(resource, next) {
                if (resource.data && AUDIO_EXTENSIONS.indexOf(resource._getExtension()) > -1) {
                    resource.sound = index_1.default.add(resource.name, {
                        loaded: next,
                        preload: true,
                        srcBuffer: resource.data,
                    });
                } else {
                    next();
                }
            }

            function middlewareFactory() {
                return middleware;
            }

            function install() {
                var Resource = PIXI.loaders.Resource;
                AUDIO_EXTENSIONS.forEach(function(ext) {
                    Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);
                    Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);
                });
                PIXI.loaders.Loader.addPixiMiddleware(middlewareFactory);
                PIXI.loader.use(middleware);
            }
            exports.install = install;

        }, {
            "./index": 17
        }],
        3: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var index_1 = require("./index");
            var SoundInstance_1 = require("./SoundInstance");
            var SoundNodes_1 = require("./SoundNodes");
            var SoundSprite_1 = require("./SoundSprite");
            var Sound = (function() {
                function Sound(context, source) {
                    var options = {};
                    if (typeof source === "string") {
                        options.src = source;
                    } else if (source instanceof ArrayBuffer) {
                        options.srcBuffer = source;
                    } else {
                        options = source;
                    }
                    options = Object.assign({
                        autoPlay: false,
                        singleInstance: false,
                        src: null,
                        srcBuffer: null,
                        preload: false,
                        volume: 1,
                        speed: 1,
                        complete: null,
                        loaded: null,
                        loop: false,
                        useXHR: true,
                    }, options);
                    this._context = context;
                    this._nodes = new SoundNodes_1.default(this._context);
                    this._source = this._nodes.bufferSource;
                    this._instances = [];
                    this._sprites = {};
                    var complete = options.complete;
                    this._autoPlayOptions = complete ? {
                        complete: complete
                    } : null;
                    this.isLoaded = false;
                    this.isPlaying = false;
                    this.autoPlay = options.autoPlay;
                    this.singleInstance = options.singleInstance;
                    this.preload = options.preload || this.autoPlay;
                    this.src = options.src;
                    this.srcBuffer = options.srcBuffer;
                    this.useXHR = options.useXHR;
                    this.volume = options.volume;
                    this.loop = options.loop;
                    this.speed = options.speed;
                    if (options.sprites) {
                        this.addSprites(options.sprites);
                    }
                    if (this.preload) {
                        this._beginPreload(options.loaded);
                    }
                }
                Sound.from = function(options) {
                    return new Sound(index_1.default.context, options);
                };
                Sound.prototype.destroy = function() {
                    this._nodes.destroy();
                    this._nodes = null;
                    this._context = null;
                    this._source = null;
                    this.removeSprites();
                    this._sprites = null;
                    this.srcBuffer = null;
                    this._removeInstances();
                    this._instances = null;
                };
                Object.defineProperty(Sound.prototype, "isPlayable", {
                    get: function() {
                        return this.isLoaded && !!this._source && !!this._source.buffer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "context", {
                    get: function() {
                        return this._context;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "volume", {
                    get: function() {
                        return this._volume;
                    },
                    set: function(volume) {
                        this._volume = this._nodes.gain.gain.value = volume;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "loop", {
                    get: function() {
                        return this._source.loop;
                    },
                    set: function(loop) {
                        this._source.loop = !!loop;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "buffer", {
                    get: function() {
                        return this._source.buffer;
                    },
                    set: function(buffer) {
                        this._source.buffer = buffer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "duration", {
                    get: function() {
                        console.assert(this.isPlayable, "Sound not yet playable, no duration");
                        return this._source.buffer.duration;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "nodes", {
                    get: function() {
                        return this._nodes;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "filters", {
                    get: function() {
                        return this._nodes.filters;
                    },
                    set: function(filters) {
                        this._nodes.filters = filters;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "speed", {
                    get: function() {
                        return this._source.playbackRate.value;
                    },
                    set: function(value) {
                        this._source.playbackRate.value = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "instances", {
                    get: function() {
                        return this._instances;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Sound.prototype, "sprites", {
                    get: function() {
                        return this._sprites;
                    },
                    enumerable: true,
                    configurable: true
                });
                Sound.prototype.addSprites = function(source, data) {
                    if (typeof source === "object") {
                        var results = {};
                        for (var alias in source) {
                            results[alias] = this.addSprites(alias, source[alias]);
                        }
                        return results;
                    } else if (typeof source === "string") {
                        console.assert(!this._sprites[source], "Alias " + source + " is already taken");
                        var sprite = new SoundSprite_1.default(this, data);
                        this._sprites[source] = sprite;
                        return sprite;
                    }
                };
                Sound.prototype.removeSprites = function(alias) {
                    if (!alias) {
                        for (var name_1 in this._sprites) {
                            this.removeSprites(name_1);
                        }
                    } else {
                        var sprite = this._sprites[alias];
                        if (sprite !== undefined) {
                            sprite.destroy();
                            delete this._sprites[alias];
                        }
                    }
                    return this;
                };
                Sound.prototype.play = function(source, complete) {
                    var _this = this;
                    var options;
                    if (typeof source === "string") {
                        var sprite = source;
                        options = {
                            sprite: sprite,
                            complete: complete
                        };
                    } else if (typeof source === "function") {
                        options = {};
                        options.complete = source;
                    } else {
                        options = source;
                    }
                    options = Object.assign({
                        complete: null,
                        loaded: null,
                        sprite: null,
                        start: 0,
                        fadeIn: 0,
                        fadeOut: 0,
                    }, options || {});
                    if (options.sprite) {
                        var alias = options.sprite;
                        console.assert(!!this._sprites[alias], "Alias " + alias + " is not available");
                        var sprite = this._sprites[alias];
                        options.start = sprite.start;
                        options.end = sprite.end;
                        options.speed = sprite.speed;
                        delete options.sprite;
                    }
                    if (options.offset) {
                        options.start = options.offset;
                    }
                    if (!this.isLoaded) {
                        return new Promise(function(resolve, reject) {
                            _this.autoPlay = true;
                            _this._autoPlayOptions = options;
                            _this._beginPreload(function(err, sound, instance) {
                                if (err) {
                                    reject(err);
                                } else {
                                    if (options.loaded) {
                                        options.loaded(err, sound, instance);
                                    }
                                    resolve(instance);
                                }
                            });
                        });
                    }
                    if (this.singleInstance) {
                        this._removeInstances();
                    }
                    var instance = SoundInstance_1.default.create(this);
                    this._instances.push(instance);
                    this.isPlaying = true;
                    instance.once("end", function() {
                        if (options.complete) {
                            options.complete(_this);
                        }
                        _this._onComplete(instance);
                    });
                    instance.once("stop", function() {
                        _this._onComplete(instance);
                    });
                    instance.play(options.start, options.end, options.speed, options.loop, options.fadeIn, options.fadeOut);
                    return instance;
                };
                Sound.prototype.stop = function() {
                    if (!this.isPlayable) {
                        this.autoPlay = false;
                        this._autoPlayOptions = null;
                        return this;
                    }
                    this.isPlaying = false;
                    for (var i = this._instances.length - 1; i >= 0; i--) {
                        this._instances[i].stop();
                    }
                    return this;
                };
                Sound.prototype.pause = function() {
                    for (var i = this._instances.length - 1; i >= 0; i--) {
                        this._instances[i].paused = true;
                    }
                    this.isPlaying = false;
                    return this;
                };;
                Sound.prototype.resume = function() {
                    for (var i = this._instances.length - 1; i >= 0; i--) {
                        this._instances[i].paused = false;
                    }
                    this.isPlaying = this._instances.length > 0;
                    return this;
                };
                Sound.prototype._beginPreload = function(callback) {
                    if (this.src) {
                        this.useXHR ? this._loadUrl(callback) : this._loadPath(callback);
                    } else if (this.srcBuffer) {
                        this._decode(this.srcBuffer, callback);
                    } else if (callback) {
                        callback(new Error("sound.src or sound.srcBuffer must be set"));
                    } else {
                        console.error("sound.src or sound.srcBuffer must be set");
                    }
                };
                Sound.prototype._onComplete = function(instance) {
                    if (this._instances) {
                        var index = this._instances.indexOf(instance);
                        if (index > -1) {
                            this._instances.splice(index, 1);
                        }
                        this.isPlaying = this._instances.length > 0;
                    }
                    instance.destroy();
                };
                Sound.prototype._removeInstances = function() {
                    for (var i = this._instances.length - 1; i >= 0; i--) {
                        this._instances[i].destroy();
                    }
                    this._instances.length = 0;
                };
                Sound.prototype._loadUrl = function(callback) {
                    var _this = this;
                    var request = new XMLHttpRequest();
                    var src = this.src;
                    request.open("GET", src, true);
                    request.responseType = "arraybuffer";
                    request.onload = function() {
                        _this.srcBuffer = request.response;
                        _this._decode(request.response, callback);
                    };
                    request.send();
                };
                Sound.prototype._loadPath = function(callback) {
                    var _this = this;
                    var fs = require("fs");
                    var src = this.src;
                    fs.readFile(src, function(err, data) {
                        if (err) {
                            console.error(err);
                            if (callback) {
                                callback(new Error("File not found " + _this.src));
                            }
                            return;
                        }
                        var arrayBuffer = new ArrayBuffer(data.length);
                        var view = new Uint8Array(arrayBuffer);
                        for (var i = 0; i < data.length; ++i) {
                            view[i] = data[i];
                        }
                        _this.srcBuffer = arrayBuffer;
                        _this._decode(arrayBuffer, callback);
                    });
                };
                Sound.prototype._decode = function(arrayBuffer, callback) {
                    var _this = this;
                    this._context.decode(arrayBuffer, function(err, buffer) {
                        if (err) {
                            if (callback) {
                                callback(err);
                            }
                        } else {
                            _this.isLoaded = true;
                            _this.buffer = buffer;
                            var instance = void 0;
                            if (_this.autoPlay) {
                                instance = _this.play(_this._autoPlayOptions);
                            }
                            if (callback) {
                                callback(null, _this, instance);
                            }
                        }
                    });
                };
                return Sound;
            }());
            exports.default = Sound;

        }, {
            "./SoundInstance": 5,
            "./SoundNodes": 7,
            "./SoundSprite": 8,
            "./index": 17,
            "fs": undefined
        }],
        4: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filterable_1 = require("./Filterable");
            var SoundContext = (function(_super) {
                __extends(SoundContext, _super);

                function SoundContext() {
                    var _this = this;
                    var ctx = new SoundContext.AudioContext();
                    var gain = ctx.createGain();
                    var compressor = ctx.createDynamicsCompressor();
                    var analyser = ctx.createAnalyser();
                    analyser.connect(gain);
                    gain.connect(compressor);
                    compressor.connect(ctx.destination);
                    _this = _super.call(this, analyser, gain) || this;
                    _this._ctx = ctx;
                    _this._offlineCtx = new SoundContext.OfflineAudioContext(1, 2, ctx.sampleRate);
                    _this._unlocked = false;
                    _this.gain = gain;
                    _this.compressor = compressor;
                    _this.analyser = analyser;
                    _this.volume = 1;
                    _this.muted = false;
                    _this.paused = false;
                    if ("ontouchstart" in window && ctx.state !== "running") {
                        _this._unlock();
                        _this._unlock = _this._unlock.bind(_this);
                        document.addEventListener("mousedown", _this._unlock, true);
                        document.addEventListener("touchstart", _this._unlock, true);
                        document.addEventListener("touchend", _this._unlock, true);
                    }
                    return _this;
                }
                SoundContext.prototype._unlock = function() {
                    if (this._unlocked) {
                        return;
                    }
                    this.playEmptySound();
                    if (this._ctx.state === "running") {
                        document.removeEventListener("mousedown", this._unlock, true);
                        document.removeEventListener("touchend", this._unlock, true);
                        document.removeEventListener("touchstart", this._unlock, true);
                        this._unlocked = true;
                    }
                };
                SoundContext.prototype.playEmptySound = function() {
                    var source = this._ctx.createBufferSource();
                    source.buffer = this._ctx.createBuffer(1, 1, 22050);
                    source.connect(this._ctx.destination);
                    source.start(0, 0, 0);
                };
                Object.defineProperty(SoundContext, "AudioContext", {
                    get: function() {
                        var win = window;
                        return (win.AudioContext ||
                            win.webkitAudioContext ||
                            null);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundContext, "OfflineAudioContext", {
                    get: function() {
                        var win = window;
                        return (win.OfflineAudioContext ||
                            win.webkitOfflineAudioContext ||
                            null);
                    },
                    enumerable: true,
                    configurable: true
                });
                SoundContext.prototype.destroy = function() {
                    _super.prototype.destroy.call(this);
                    var ctx = this._ctx;
                    if (typeof ctx.close !== "undefined") {
                        ctx.close();
                    }
                    this.analyser.disconnect();
                    this.gain.disconnect();
                    this.compressor.disconnect();
                    this.gain = null;
                    this.analyser = null;
                    this.compressor = null;
                    this._offlineCtx = null;
                    this._ctx = null;
                };
                Object.defineProperty(SoundContext.prototype, "audioContext", {
                    get: function() {
                        return this._ctx;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundContext.prototype, "offlineContext", {
                    get: function() {
                        return this._offlineCtx;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundContext.prototype, "muted", {
                    get: function() {
                        return this._muted;
                    },
                    set: function(muted) {
                        this._muted = !!muted;
                        this.gain.gain.value = this._muted ? 0 : this._volume;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundContext.prototype, "volume", {
                    get: function() {
                        return this._volume;
                    },
                    set: function(volume) {
                        this._volume = volume;
                        if (!this._muted) {
                            this.gain.gain.value = this._volume;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundContext.prototype, "paused", {
                    get: function() {
                        return this._paused;
                    },
                    set: function(paused) {
                        if (paused && this._ctx.state === "running") {
                            this._ctx.suspend();
                        } else if (!paused && this._ctx.state === "suspended") {
                            this._ctx.resume();
                        }
                        this._paused = paused;
                    },
                    enumerable: true,
                    configurable: true
                });
                SoundContext.prototype.toggleMute = function() {
                    this.muted = !this.muted;
                    return this._muted;
                };
                SoundContext.prototype.decode = function(arrayBuffer, callback) {
                    this._offlineCtx.decodeAudioData(arrayBuffer, function(buffer) {
                        callback(null, buffer);
                    }, function() {
                        callback(new Error("Unable to decode file"));
                    });
                };
                return SoundContext;
            }(Filterable_1.default));
            exports.default = SoundContext;

        }, {
            "./Filterable": 1
        }],
        5: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var id = 0;
            var SoundInstance = (function(_super) {
                __extends(SoundInstance, _super);

                function SoundInstance(parent) {
                    var _this = _super.call(this) || this;
                    _this.id = id++;
                    _this._parent = null;
                    _this._paused = false;
                    _this._elapsed = 0;
                    _this._init(parent);
                    return _this;
                }
                SoundInstance.create = function(parent) {
                    if (SoundInstance._pool.length > 0) {
                        var sound = SoundInstance._pool.pop();
                        sound._init(parent);
                        return sound;
                    } else {
                        return new SoundInstance(parent);
                    }
                };
                SoundInstance.prototype.stop = function() {
                    if (this._source) {
                        this._internalStop();
                        this.emit("stop");
                    }
                };
                SoundInstance.prototype.play = function(start, end, speed, loop, fadeIn, fadeOut) {
                    if (end) {
                        console.assert(end > start, "End time is before start time");
                    }
                    this._paused = false;
                    this._source = this._parent.nodes.cloneBufferSource();
                    if (speed !== undefined) {
                        this._source.playbackRate.value = speed;
                    }
                    this._speed = this._source.playbackRate.value;
                    if (loop !== undefined) {
                        this._loop = this._source.loop = !!loop;
                    }
                    if (this._loop && end !== undefined) {
                        console.warn('Looping not support when specifying an "end" time');
                        this._loop = this._source.loop = false;
                    }
                    this._end = end;
                    var duration = this._source.buffer.duration;
                    fadeIn = this._toSec(fadeIn);
                    if (fadeIn > duration) {
                        fadeIn = duration;
                    }
                    if (!this._loop) {
                        fadeOut = this._toSec(fadeOut);
                        if (fadeOut > duration - fadeIn) {
                            fadeOut = duration - fadeIn;
                        }
                    }
                    this._duration = duration;
                    this._fadeIn = fadeIn;
                    this._fadeOut = fadeOut;
                    this._lastUpdate = this._now();
                    this._elapsed = start;
                    this._source.onended = this._onComplete.bind(this);
                    if (end) {
                        this._source.start(0, start, end - start);
                    } else {
                        this._source.start(0, start);
                    }
                    this.emit("start");
                    this._update(true);
                    this._enabled = true;
                };
                SoundInstance.prototype._toSec = function(time) {
                    if (time > 10) {
                        time /= 1000;
                    }
                    return time || 0;
                };
                Object.defineProperty(SoundInstance.prototype, "_enabled", {
                    set: function(enabled) {
                        var _this = this;
                        this._parent.nodes.script.onaudioprocess = !enabled ? null : function() {
                            _this._update();
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundInstance.prototype, "progress", {
                    get: function() {
                        return this._progress;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundInstance.prototype, "paused", {
                    get: function() {
                        return this._paused;
                    },
                    set: function(paused) {
                        if (paused !== this._paused) {
                            this._paused = paused;
                            if (paused) {
                                this._internalStop();
                                this.emit("paused");
                            } else {
                                this.emit("resumed");
                                this.play(this._elapsed % this._duration, this._end, this._speed, this._loop, this._fadeIn, this._fadeOut);
                            }
                            this.emit("pause", paused);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                SoundInstance.prototype.destroy = function() {
                    this.removeAllListeners();
                    this._internalStop();
                    this._source = null;
                    this._speed = 0;
                    this._end = 0;
                    this._parent = null;
                    this._elapsed = 0;
                    this._duration = 0;
                    this._loop = false;
                    this._fadeIn = 0;
                    this._fadeOut = 0;
                    this._paused = false;
                    if (SoundInstance._pool.indexOf(this) < 0) {
                        SoundInstance._pool.push(this);
                    }
                };
                SoundInstance.prototype.toString = function() {
                    return "[SoundInstance id=" + this.id + "]";
                };
                SoundInstance.prototype._now = function() {
                    return this._parent.context.audioContext.currentTime;
                };
                SoundInstance.prototype._update = function(force) {
                    if (force === void 0) {
                        force = false;
                    }
                    if (this._source) {
                        var now = this._now();
                        var delta = now - this._lastUpdate;
                        if (delta > 0 || force) {
                            this._elapsed += delta;
                            this._lastUpdate = now;
                            var duration = this._duration;
                            var progress = ((this._elapsed * this._speed) % duration) / duration;
                            if (this._fadeIn || this._fadeOut) {
                                var position = progress * duration;
                                var gain = this._parent.nodes.gain.gain;
                                var maxVolume = this._parent.volume;
                                if (this._fadeIn) {
                                    if (position <= this._fadeIn && progress < 1) {
                                        gain.value = maxVolume * (position / this._fadeIn);
                                    } else {
                                        gain.value = maxVolume;
                                        this._fadeIn = 0;
                                    }
                                }
                                if (this._fadeOut && position >= duration - this._fadeOut) {
                                    var percent = (duration - position) / this._fadeOut;
                                    gain.value = maxVolume * percent;
                                }
                            }
                            this._progress = progress;
                            this.emit("progress", this._progress, duration);
                        }
                    }
                };
                SoundInstance.prototype._init = function(parent) {
                    this._parent = parent;
                };
                SoundInstance.prototype._internalStop = function() {
                    if (this._source) {
                        this._enabled = false;
                        this._source.onended = null;
                        this._source.stop();
                        this._source = null;
                        this._parent.volume = this._parent.volume;
                    }
                };
                SoundInstance.prototype._onComplete = function() {
                    if (this._source) {
                        this._enabled = false;
                        this._source.onended = null;
                    }
                    this._source = null;
                    this._progress = 1;
                    this.emit("progress", 1, this._duration);
                    this.emit("end", this);
                };
                return SoundInstance;
            }(PIXI.utils.EventEmitter));
            SoundInstance._pool = [];
            exports.default = SoundInstance;

        }, {}],
        6: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filterable_1 = require("./Filterable");
            var filters = require("./filters");
            var Sound_1 = require("./Sound");
            var SoundContext_1 = require("./SoundContext");
            var SoundInstance_1 = require("./SoundInstance");
            var SoundSprite_1 = require("./SoundSprite");
            var SoundUtils_1 = require("./SoundUtils");
            var SoundLibrary = (function() {
                function SoundLibrary() {
                    if (this.supported) {
                        this._context = new SoundContext_1.default();
                    }
                    this._sounds = {};
                    this.utils = SoundUtils_1.default;
                    this.filters = filters;
                    this.Sound = Sound_1.default;
                    this.SoundInstance = SoundInstance_1.default;
                    this.SoundLibrary = SoundLibrary;
                    this.SoundSprite = SoundSprite_1.default;
                    this.Filterable = Filterable_1.default;
                }
                Object.defineProperty(SoundLibrary.prototype, "context", {
                    get: function() {
                        return this._context;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundLibrary.prototype, "filtersAll", {
                    get: function() {
                        return this._context.filters;
                    },
                    set: function(filters) {
                        this._context.filters = filters;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoundLibrary.prototype, "supported", {
                    get: function() {
                        return SoundContext_1.default.AudioContext !== null;
                    },
                    enumerable: true,
                    configurable: true
                });
                SoundLibrary.prototype.add = function(source, sourceOptions) {
                    if (typeof source === "object") {
                        var results = {};
                        for (var alias in source) {
                            var options = this._getOptions(source[alias], sourceOptions);
                            results[alias] = this.add(alias, options);
                        }
                        return results;
                    } else if (typeof source === "string") {
                        console.assert(!this._sounds[source], "Sound with alias " + source + " already exists.");
                        if (sourceOptions instanceof Sound_1.default) {
                            this._sounds[source] = sourceOptions;
                            return sourceOptions;
                        } else {
                            var options = this._getOptions(sourceOptions);
                            var sound = new Sound_1.default(this.context, options);
                            this._sounds[source] = sound;
                            return sound;
                        }
                    }
                };
                SoundLibrary.prototype._getOptions = function(source, overrides) {
                    var options;
                    if (typeof source === "string") {
                        options = {
                            src: source
                        };
                    } else if (source instanceof ArrayBuffer) {
                        options = {
                            srcBuffer: source
                        };
                    } else {
                        options = source;
                    }
                    return Object.assign(options, overrides || {});
                };
                SoundLibrary.prototype.remove = function(alias) {
                    this.exists(alias, true);
                    this._sounds[alias].destroy();
                    delete this._sounds[alias];
                    return this;
                };
                Object.defineProperty(SoundLibrary.prototype, "volumeAll", {
                    get: function() {
                        return this._context.volume;
                    },
                    set: function(volume) {
                        this._context.volume = volume;
                    },
                    enumerable: true,
                    configurable: true
                });
                SoundLibrary.prototype.pauseAll = function() {
                    this._context.paused = true;
                    return this;
                };
                SoundLibrary.prototype.resumeAll = function() {
                    this._context.paused = false;
                    return this;
                };
                SoundLibrary.prototype.muteAll = function() {
                    this._context.muted = true;
                    return this;
                };
                SoundLibrary.prototype.unmuteAll = function() {
                    this._context.muted = false;
                    return this;
                };
                SoundLibrary.prototype.removeAll = function() {
                    for (var alias in this._sounds) {
                        this._sounds[alias].destroy();
                        delete this._sounds[alias];
                    }
                    return this;
                };
                SoundLibrary.prototype.stopAll = function() {
                    for (var alias in this._sounds) {
                        this._sounds[alias].stop();
                    }
                    return this;
                };
                SoundLibrary.prototype.exists = function(alias, assert) {
                    if (assert === void 0) {
                        assert = false;
                    }
                    var exists = !!this._sounds[alias];
                    if (assert) {
                        console.assert(exists, "No sound matching alias '" + alias + "'.");
                    }
                    return exists;
                };
                SoundLibrary.prototype.find = function(alias) {
                    this.exists(alias, true);
                    return this._sounds[alias];
                };
                SoundLibrary.prototype.play = function(alias, options) {
                    return this.find(alias).play(options);
                };
                SoundLibrary.prototype.stop = function(alias) {
                    return this.find(alias).stop();
                };
                SoundLibrary.prototype.pause = function(alias) {
                    return this.find(alias).pause();
                };
                SoundLibrary.prototype.resume = function(alias) {
                    return this.find(alias).resume();
                };
                SoundLibrary.prototype.volume = function(alias, volume) {
                    var sound = this.find(alias);
                    if (volume !== undefined) {
                        sound.volume = volume;
                    }
                    return sound.volume;
                };
                SoundLibrary.prototype.duration = function(alias) {
                    return this.find(alias).duration;
                };
                SoundLibrary.prototype.destroy = function() {
                    this.removeAll();
                    this._sounds = null;
                    this._context = null;
                };
                return SoundLibrary;
            }());
            exports.default = SoundLibrary;

        }, {
            "./Filterable": 1,
            "./Sound": 3,
            "./SoundContext": 4,
            "./SoundInstance": 5,
            "./SoundSprite": 8,
            "./SoundUtils": 9,
            "./filters": 16
        }],
        7: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filterable_1 = require("./Filterable");
            var SoundNodes = (function(_super) {
                __extends(SoundNodes, _super);

                function SoundNodes(context) {
                    var _this = this;
                    var audioContext = context.audioContext;
                    var bufferSource = audioContext.createBufferSource();
                    var script = audioContext.createScriptProcessor(SoundNodes.BUFFER_SIZE);
                    var gain = audioContext.createGain();
                    var analyser = audioContext.createAnalyser();
                    bufferSource.connect(analyser);
                    analyser.connect(gain);
                    gain.connect(context.destination);
                    script.connect(context.destination);
                    _this = _super.call(this, analyser, gain) || this;
                    _this.context = context;
                    _this.bufferSource = bufferSource;
                    _this.script = script;
                    _this.gain = gain;
                    _this.analyser = analyser;
                    return _this;
                }
                SoundNodes.prototype.destroy = function() {
                    _super.prototype.destroy.call(this);
                    this.bufferSource.disconnect();
                    this.script.disconnect();
                    this.gain.disconnect();
                    this.analyser.disconnect();
                    this.bufferSource = null;
                    this.script = null;
                    this.gain = null;
                    this.analyser = null;
                    this.context = null;
                };
                SoundNodes.prototype.cloneBufferSource = function() {
                    var orig = this.bufferSource;
                    var clone = this.context.audioContext.createBufferSource();
                    clone.buffer = orig.buffer;
                    clone.playbackRate.value = orig.playbackRate.value;
                    clone.loop = orig.loop;
                    clone.connect(this.destination);
                    return clone;
                };
                return SoundNodes;
            }(Filterable_1.default));
            SoundNodes.BUFFER_SIZE = 256;
            exports.default = SoundNodes;

        }, {
            "./Filterable": 1
        }],
        8: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var SoundSprite = (function() {
                function SoundSprite(parent, options) {
                    this.parent = parent;
                    Object.assign(this, options);
                    this.duration = this.end - this.start;
                    console.assert(this.duration > 0, "End time must be after start time");
                }
                SoundSprite.prototype.play = function(complete) {
                    return this.parent.play(Object.assign({
                        complete: complete,
                        speed: this.speed || this.parent.speed,
                        end: this.end,
                        start: this.start,
                    }));
                };
                SoundSprite.prototype.destroy = function() {
                    this.parent = null;
                };
                return SoundSprite;
            }());
            exports.default = SoundSprite;

        }, {}],
        9: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var uuid = require("uuid/v4");
            var index_1 = require("./index");
            var Sound_1 = require("./Sound");
            var SoundUtils = (function() {
                function SoundUtils() {}
                SoundUtils.sineTone = function(hertz, seconds) {
                    if (hertz === void 0) {
                        hertz = 200;
                    }
                    if (seconds === void 0) {
                        seconds = 1;
                    }
                    var soundContext = index_1.default.context;
                    var soundInstance = new Sound_1.default(soundContext, {
                        singleInstance: true,
                    });
                    var nChannels = 1;
                    var sampleRate = 48000;
                    var amplitude = 2;
                    var buffer = soundContext.audioContext.createBuffer(nChannels, seconds * sampleRate, sampleRate);
                    var fArray = buffer.getChannelData(0);
                    for (var i = 0; i < fArray.length; i++) {
                        var time = i / buffer.sampleRate;
                        var angle = hertz * time * Math.PI;
                        fArray[i] = Math.sin(angle) * amplitude;
                    }
                    soundInstance.buffer = buffer;
                    soundInstance.isLoaded = true;
                    return soundInstance;
                };
                SoundUtils.render = function(sound, options) {
                    options = Object.assign({
                        width: 512,
                        height: 128,
                        fill: "black",
                    }, options || {});
                    console.assert(!!sound.buffer, "No buffer found, load first");
                    var canvas = document.createElement("canvas");
                    canvas.width = options.width;
                    canvas.height = options.height;
                    var context = canvas.getContext("2d");
                    context.fillStyle = options.fill;
                    var data = sound.buffer.getChannelData(0);
                    var step = Math.ceil(data.length / options.width);
                    var amp = options.height / 2;
                    for (var i = 0; i < options.width; i++) {
                        var min = 1.0;
                        var max = -1.0;
                        for (var j = 0; j < step; j++) {
                            var datum = data[(i * step) + j];
                            if (datum < min) {
                                min = datum;
                            }
                            if (datum > max) {
                                max = datum;
                            }
                        }
                        context.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));
                    }
                    return PIXI.BaseTexture.fromCanvas(canvas);
                };
                SoundUtils.playOnce = function(src, callback) {
                    var alias = uuid();
                    index_1.default.add(alias, {
                        src: src,
                        preload: true,
                        autoPlay: true,
                        loaded: function(err) {
                            if (err) {
                                console.error(err);
                                index_1.default.remove(alias);
                                if (callback) {
                                    callback(err);
                                }
                            }
                        },
                        complete: function() {
                            index_1.default.remove(alias);
                            if (callback) {
                                callback(null);
                            }
                        },
                    });
                    return alias;
                };
                return SoundUtils;
            }());
            exports.default = SoundUtils;

        }, {
            "./Sound": 3,
            "./index": 17,
            "uuid/v4": 20
        }],
        10: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Sound_1 = require("./Sound");
            var SoundLibrary_1 = require("./SoundLibrary");
            var SoundLibraryPrototype = SoundLibrary_1.default.prototype;
            var SoundPrototype = Sound_1.default.prototype;
            SoundLibraryPrototype.sound = function sound(alias) {
                console.warn("PIXI.sound.sound is deprecated, use PIXI.sound.find");
                return this.find(alias);
            };
            SoundLibraryPrototype.panning = function panning(alias, panningValue) {
                console.warn("PIXI.sound.panning is deprecated, use PIXI.sound.filters.StereoPan");
                return 0;
            };
            SoundLibraryPrototype.addMap = function addMap(map, globalOptions) {
                console.warn("PIXI.sound.addMap is deprecated, use PIXI.sound.add");
                return this.add(map, globalOptions);
            };
            Object.defineProperty(SoundLibraryPrototype, "SoundUtils", {
                get: function() {
                    console.warn("PIXI.sound.SoundUtils is deprecated, use PIXI.sound.utils");
                    return this.utils;
                },
            });
            Object.defineProperty(SoundPrototype, "block", {
                get: function() {
                    console.warn("PIXI.sound.Sound.prototype.block is deprecated, use singleInstance instead");
                    return this.singleInstance;
                },
                set: function(value) {
                    console.warn("PIXI.sound.Sound.prototype.block is deprecated, use singleInstance instead");
                    this.singleInstance = value;
                },
            });
            Object.defineProperty(SoundPrototype, "loaded", {
                get: function() {
                    console.warn("PIXI.sound.Sound.prototype.loaded is deprecated, use constructor option instead");
                    return null;
                },
                set: function(value) {
                    console.warn("PIXI.sound.Sound.prototype.loaded is deprecated, use constructor option instead");
                },
            });
            Object.defineProperty(SoundPrototype, "complete", {
                get: function() {
                    console.warn("PIXI.sound.Sound.prototype.complete is deprecated, use constructor option instead");
                    return null;
                },
                set: function(value) {
                    console.warn("PIXI.sound.Sound.prototype.complete is deprecated, use constructor option instead");
                },
            });

        }, {
            "./Sound": 3,
            "./SoundLibrary": 6
        }],
        11: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter_1 = require("./Filter");
            var index_1 = require("../index");
            var DistortionFilter = (function(_super) {
                __extends(DistortionFilter, _super);

                function DistortionFilter(amount) {
                    if (amount === void 0) {
                        amount = 0;
                    }
                    var _this = this;
                    var distortion = index_1.default.context.audioContext.createWaveShaper();
                    _this = _super.call(this, distortion) || this;
                    _this._distortion = distortion;
                    _this.amount = amount;
                    return _this;
                }
                Object.defineProperty(DistortionFilter.prototype, "amount", {
                    get: function() {
                        return this._amount;
                    },
                    set: function(value) {
                        value *= 1000;
                        this._amount = value;
                        var samples = 44100;
                        var curve = new Float32Array(samples);
                        var deg = Math.PI / 180;
                        var i = 0;
                        var x;
                        for (; i < samples; ++i) {
                            x = i * 2 / samples - 1;
                            curve[i] = (3 + value) * x * 20 * deg / (Math.PI + value * Math.abs(x));
                        }
                        this._distortion.curve = curve;
                        this._distortion.oversample = '4x';
                    },
                    enumerable: true,
                    configurable: true
                });
                DistortionFilter.prototype.destroy = function() {
                    this._distortion = null;
                    _super.prototype.destroy.call(this);
                };
                return DistortionFilter;
            }(Filter_1.default));
            exports.default = DistortionFilter;

        }, {
            "../index": 17,
            "./Filter": 13
        }],
        12: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter_1 = require("./Filter");
            var index_1 = require("../index");
            var EqualizerFilter = (function(_super) {
                __extends(EqualizerFilter, _super);

                function EqualizerFilter(f32, f64, f125, f250, f500, f1k, f2k, f4k, f8k, f16k) {
                    if (f32 === void 0) {
                        f32 = 0;
                    }
                    if (f64 === void 0) {
                        f64 = 0;
                    }
                    if (f125 === void 0) {
                        f125 = 0;
                    }
                    if (f250 === void 0) {
                        f250 = 0;
                    }
                    if (f500 === void 0) {
                        f500 = 0;
                    }
                    if (f1k === void 0) {
                        f1k = 0;
                    }
                    if (f2k === void 0) {
                        f2k = 0;
                    }
                    if (f4k === void 0) {
                        f4k = 0;
                    }
                    if (f8k === void 0) {
                        f8k = 0;
                    }
                    if (f16k === void 0) {
                        f16k = 0;
                    }
                    var _this = this;
                    var equalizerBands = [{
                            f: EqualizerFilter.F32,
                            type: 'lowshelf',
                            gain: f32
                        },
                        {
                            f: EqualizerFilter.F64,
                            type: 'peaking',
                            gain: f64
                        },
                        {
                            f: EqualizerFilter.F125,
                            type: 'peaking',
                            gain: f125
                        },
                        {
                            f: EqualizerFilter.F250,
                            type: 'peaking',
                            gain: f250
                        },
                        {
                            f: EqualizerFilter.F500,
                            type: 'peaking',
                            gain: f500
                        },
                        {
                            f: EqualizerFilter.F1K,
                            type: 'peaking',
                            gain: f1k
                        },
                        {
                            f: EqualizerFilter.F2K,
                            type: 'peaking',
                            gain: f2k
                        },
                        {
                            f: EqualizerFilter.F4K,
                            type: 'peaking',
                            gain: f4k
                        },
                        {
                            f: EqualizerFilter.F8K,
                            type: 'peaking',
                            gain: f8k
                        },
                        {
                            f: EqualizerFilter.F16K,
                            type: 'highshelf',
                            gain: f16k
                        }
                    ];
                    var bands = equalizerBands.map(function(band) {
                        var filter = index_1.default.context.audioContext.createBiquadFilter();
                        filter.type = band.type;
                        filter.gain.value = band.gain;
                        filter.Q.value = 1;
                        filter.frequency.value = band.f;
                        return filter;
                    });
                    _this = _super.call(this, bands[0], bands[bands.length - 1]) || this;
                    _this.bands = bands;
                    _this.bandsMap = {};
                    for (var i = 0; i < _this.bands.length; i++) {
                        var node = _this.bands[i];
                        if (i > 0) {
                            _this.bands[i - 1].connect(node);
                        }
                        _this.bandsMap[node.frequency.value] = node;
                    }
                    return _this;
                }
                EqualizerFilter.prototype.setGain = function(frequency, gain) {
                    if (gain === void 0) {
                        gain = 0;
                    }
                    if (!this.bandsMap[frequency]) {
                        throw 'No band found for frequency ' + frequency;
                    }
                    this.bandsMap[frequency].gain.value = gain;
                };
                EqualizerFilter.prototype.reset = function() {
                    this.bands.forEach(function(band) {
                        band.gain.value = 0;
                    });
                };
                EqualizerFilter.prototype.destroy = function() {
                    this.bands.forEach(function(band) {
                        band.disconnect();
                    });
                    this.bands = null;
                    this.bandsMap = null;
                };
                return EqualizerFilter;
            }(Filter_1.default));
            EqualizerFilter.F32 = 32;
            EqualizerFilter.F64 = 64;
            EqualizerFilter.F125 = 125;
            EqualizerFilter.F250 = 250;
            EqualizerFilter.F500 = 500;
            EqualizerFilter.F1K = 1000;
            EqualizerFilter.F2K = 2000;
            EqualizerFilter.F4K = 4000;
            EqualizerFilter.F8K = 8000;
            EqualizerFilter.F16K = 16000;
            exports.default = EqualizerFilter;

        }, {
            "../index": 17,
            "./Filter": 13
        }],
        13: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter = (function() {
                function Filter(destination, source) {
                    this.destination = destination;
                    this.source = source || destination;
                }
                Filter.prototype.connect = function(destination) {
                    this.source.connect(destination);
                };
                Filter.prototype.disconnect = function() {
                    this.source.disconnect();
                };
                Filter.prototype.destroy = function() {
                    this.disconnect();
                    this.destination = null;
                    this.source = null;
                };
                return Filter;
            }());
            exports.default = Filter;

        }, {}],
        14: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter_1 = require("./Filter");
            var index_1 = require("../index");
            var ReverbFilter = (function(_super) {
                __extends(ReverbFilter, _super);

                function ReverbFilter(seconds, decay, reverse) {
                    if (seconds === void 0) {
                        seconds = 3;
                    }
                    if (decay === void 0) {
                        decay = 2;
                    }
                    if (reverse === void 0) {
                        reverse = false;
                    }
                    var _this = this;
                    var convolver = index_1.default.context.audioContext.createConvolver();
                    _this = _super.call(this, convolver) || this;
                    _this._convolver = convolver;
                    _this._seconds = _this._clamp(seconds, 1, 50);
                    _this._decay = _this._clamp(decay, 0, 100);
                    _this._reverse = reverse;
                    _this._rebuild();
                    return _this;
                }
                ReverbFilter.prototype._clamp = function(value, min, max) {
                    return Math.min(max, Math.max(min, value));
                };
                Object.defineProperty(ReverbFilter.prototype, "seconds", {
                    get: function() {
                        return this._seconds;
                    },
                    set: function(seconds) {
                        this._seconds = this._clamp(seconds, 1, 50);
                        this._rebuild();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReverbFilter.prototype, "decay", {
                    get: function() {
                        return this._decay;
                    },
                    set: function(decay) {
                        this._decay = this._clamp(decay, 0, 100);
                        this._rebuild();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReverbFilter.prototype, "reverse", {
                    get: function() {
                        return this._reverse;
                    },
                    set: function(reverse) {
                        this._reverse = reverse;
                        this._rebuild();
                    },
                    enumerable: true,
                    configurable: true
                });
                ReverbFilter.prototype._rebuild = function() {
                    var context = index_1.default.context.audioContext;
                    var rate = context.sampleRate;
                    var length = rate * this._seconds;
                    var impulse = context.createBuffer(2, length, rate);
                    var impulseL = impulse.getChannelData(0);
                    var impulseR = impulse.getChannelData(1);
                    var n;
                    for (var i = 0; i < length; i++) {
                        n = this._reverse ? length - i : i;
                        impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);
                        impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);
                    }
                    this._convolver.buffer = impulse;
                };
                ReverbFilter.prototype.destroy = function() {
                    this._convolver = null;
                    _super.prototype.destroy.call(this);
                };
                return ReverbFilter;
            }(Filter_1.default));
            exports.default = ReverbFilter;

        }, {
            "../index": 17,
            "./Filter": 13
        }],
        15: [function(require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function() {
                var extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function(d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter_1 = require("./Filter");
            var index_1 = require("../index");
            var StereoFilter = (function(_super) {
                __extends(StereoFilter, _super);

                function StereoFilter(pan) {
                    if (pan === void 0) {
                        pan = 0;
                    }
                    var _this = this;
                    var stereo;
                    var panner;
                    var destination;
                    var audioContext = index_1.default.context.audioContext;
                    if (audioContext.createStereoPanner) {
                        stereo = audioContext.createStereoPanner();
                        destination = stereo;
                    } else {
                        panner = audioContext.createPanner();
                        panner.panningModel = 'equalpower';
                        destination = panner;
                    }
                    _this = _super.call(this, destination) || this;
                    _this._stereo = stereo;
                    _this._panner = panner;
                    _this.pan = pan;
                    return _this;
                }
                Object.defineProperty(StereoFilter.prototype, "pan", {
                    get: function() {
                        return this._pan;
                    },
                    set: function(value) {
                        this._pan = value;
                        if (this._stereo) {
                            this._stereo.pan.value = value;
                        } else {
                            this._panner.setPosition(value, 0, 1 - Math.abs(value));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                StereoFilter.prototype.destroy = function() {
                    _super.prototype.destroy.call(this);
                    this._stereo = null;
                    this._panner = null;
                };
                return StereoFilter;
            }(Filter_1.default));
            exports.default = StereoFilter;

        }, {
            "../index": 17,
            "./Filter": 13
        }],
        16: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Filter_1 = require("./Filter");
            exports.Filter = Filter_1.default;
            var EqualizerFilter_1 = require("./EqualizerFilter");
            exports.EqualizerFilter = EqualizerFilter_1.default;
            var DistortionFilter_1 = require("./DistortionFilter");
            exports.DistortionFilter = DistortionFilter_1.default;
            var StereoFilter_1 = require("./StereoFilter");
            exports.StereoFilter = StereoFilter_1.default;
            var ReverbFilter_1 = require("./ReverbFilter");
            exports.ReverbFilter = ReverbFilter_1.default;

        }, {
            "./DistortionFilter": 11,
            "./EqualizerFilter": 12,
            "./Filter": 13,
            "./ReverbFilter": 14,
            "./StereoFilter": 15
        }],
        17: [function(require, module, exports) {
            (function(global) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                var LoaderMiddleware_1 = require("./LoaderMiddleware");
                var SoundLibrary_1 = require("./SoundLibrary");
                require("./deprecations");
                var sound = new SoundLibrary_1.default();
                if (global.PIXI === undefined) {
                    throw new Error("pixi.js is required");
                }
                if (PIXI.loaders !== undefined) {
                    LoaderMiddleware_1.install();
                }
                Object.defineProperty(PIXI, "sound", {
                    get: function() {
                        return sound;
                    },
                });
                exports.default = sound;

            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

        }, {
            "./LoaderMiddleware": 2,
            "./SoundLibrary": 6,
            "./deprecations": 10
        }],
        18: [function(require, module, exports) {
            /**
             * Convert array of 16 byte values to UUID string format of the form:
             * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
             */
            var byteToHex = [];
            for (var i = 0; i < 256; ++i) {
                byteToHex[i] = (i + 0x100).toString(16).substr(1);
            }

            function bytesToUuid(buf, offset) {
                var i = offset || 0;
                var bth = byteToHex;
                return bth[buf[i++]] + bth[buf[i++]] +
                    bth[buf[i++]] + bth[buf[i++]] + '-' +
                    bth[buf[i++]] + bth[buf[i++]] + '-' +
                    bth[buf[i++]] + bth[buf[i++]] + '-' +
                    bth[buf[i++]] + bth[buf[i++]] + '-' +
                    bth[buf[i++]] + bth[buf[i++]] +
                    bth[buf[i++]] + bth[buf[i++]] +
                    bth[buf[i++]] + bth[buf[i++]];
            }

            module.exports = bytesToUuid;

        }, {}],
        19: [function(require, module, exports) {
            (function(global) {
                // Unique ID creation requires a high quality random # generator.  In the
                // browser this is a little complicated due to unknown quality of Math.random()
                // and inconsistent support for the `crypto` API.  We do the best we can via
                // feature-detection
                var rng;

                var crypto = global.crypto || global.msCrypto; // for IE 11
                if (crypto && crypto.getRandomValues) {
                    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
                    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
                    rng = function whatwgRNG() {
                        crypto.getRandomValues(rnds8);
                        return rnds8;
                    };
                }

                if (!rng) {
                    // Math.random()-based (RNG)
                    //
                    // If all else fails, use Math.random().  It's fast, but is of unspecified
                    // quality.
                    var rnds = new Array(16);
                    rng = function() {
                        for (var i = 0, r; i < 16; i++) {
                            if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
                            rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
                        }

                        return rnds;
                    };
                }

                module.exports = rng;

            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

        }, {}],
        20: [function(require, module, exports) {
            var rng = require('./lib/rng');
            var bytesToUuid = require('./lib/bytesToUuid');

            function v4(options, buf, offset) {
                var i = buf && offset || 0;

                if (typeof(options) == 'string') {
                    buf = options == 'binary' ? new Array(16) : null;
                    options = null;
                }
                options = options || {};

                var rnds = options.random || (options.rng || rng)();

                // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
                rnds[6] = (rnds[6] & 0x0f) | 0x40;
                rnds[8] = (rnds[8] & 0x3f) | 0x80;

                // Copy bytes to buffer, if provided
                if (buf) {
                    for (var ii = 0; ii < 16; ++ii) {
                        buf[i + ii] = rnds[ii];
                    }
                }

                return buf || bytesToUuid(rnds);
            }

            module.exports = v4;

        }, {
            "./lib/bytesToUuid": 18,
            "./lib/rng": 19
        }]
    }, {}, [17])(17)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,